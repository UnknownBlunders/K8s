apiVersion: v1
kind: Namespace
metadata:
  labels:
    name: jellyfin
  name: jellyfin
---
apiVersion: v1
kind: Service
metadata:
  name: jellyfin-service
  namespace: jellyfin
spec:
  ports:
  - port: 80
    protocol: TCP
    targetPort: 8096
  selector:
    app: jellyfin
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: jellyfin-config-pv
spec:
  accessModes:
  - ReadWriteOnce
  capacity:
    storage: 50Gi
  mountOptions:
  - hard
  - nfsvers=4.2
  nfs:
    path: /jellyfin-config
    server: nfs.blunders.me
  storageClassName: nfs
  volumeMode: Filesystem
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: jellyfin-media-pv
spec:
  accessModes:
  - ReadOnlyMany
  capacity:
    storage: 5Ti
  mountOptions:
  - hard
  - nfsvers=4.2
  nfs:
    path: /jellyfin
    server: nfs.blunders.me
  storageClassName: nfs
  volumeMode: Filesystem
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jellyfin-config-pvc
  namespace: jellyfin
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
  storageClassName: nfs
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jellyfin-media-pvc
  namespace: jellyfin
spec:
  accessModes:
  - ReadOnlyMany
  resources:
    requests:
      storage: 5Ti
  storageClassName: nfs
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: jellyfin
  name: jellyfin-deployment
  namespace: jellyfin
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jellyfin
  template:
    metadata:
      labels:
        app: jellyfin
    spec:
      containers:
      - env:
        - name: JELLYFIN_PublishedServerUrl
          value: https://jellyfin.blunders.me
        image: ghcr.io/jellyfin/jellyfin:10.10.3
        name: jellyfin
        ports:
        - containerPort: 8096
        resources:
          limits:
            cpu: 3000m
            gpu.intel.com/i915: "1"
            memory: 2700Mi
          requests:
            cpu: 100m
            memory: 300Mi
        securityContext:
          runAsGroup: 1003
          runAsUser: 1003
        volumeMounts:
        - mountPath: /media
          name: jellyfin-media-pvc
        - mountPath: /config
          name: jellyfin-config-pvc
          subPath: config
        - mountPath: /cache
          name: jellyfin-config-pvc
          subPath: cache
      volumes:
      - name: jellyfin-config-pvc
        persistentVolumeClaim:
          claimName: jellyfin-config-pvc
      - name: jellyfin-media-pvc
        persistentVolumeClaim:
          claimName: jellyfin-media-pvc
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    cert-manager.io/cluster-issuer: prod-cert-issuer
  name: jellyfin
  namespace: jellyfin
spec:
  ingressClassName: nginx
  rules:
  - host: jellyfin.blunders.me
    http:
      paths:
      - backend:
          service:
            name: jellyfin-service
            port:
              number: 80
        path: /
        pathType: Prefix
  tls:
  - hosts:
    - jellyfin.blunders.me
    secretName: jellyfin-secret-tls
apiVersion: v1
kind: Namespace
metadata:
  labels:
    name: jellyfin
  name: jellyfin
---
apiVersion: v1
kind: Service
metadata:
  name: jellyfin-service
  namespace: jellyfin
spec:
  ports:
  - port: 80
    protocol: TCP
    targetPort: 8096
  selector:
    app: jellyfin
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: jellyfin-config-pv
spec:
  accessModes:
  - ReadWriteOnce
  capacity:
    storage: 50Gi
  mountOptions:
  - hard
  - nfsvers=4.2
  nfs:
    path: /jellyfin-config
    server: nfs.blunders.me
  storageClassName: nfs
  volumeMode: Filesystem
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: jellyfin-media-pv
spec:
  accessModes:
  - ReadOnlyMany
  capacity:
    storage: 5Ti
  mountOptions:
  - hard
  - nfsvers=4.2
  nfs:
    path: /jellyfin
    server: nfs.blunders.me
  storageClassName: nfs
  volumeMode: Filesystem
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jellyfin-config-pvc
  namespace: jellyfin
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
  storageClassName: nfs
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jellyfin-media-pvc
  namespace: jellyfin
spec:
  accessModes:
  - ReadOnlyMany
  resources:
    requests:
      storage: 5Ti
  storageClassName: nfs
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: jellyfin
  name: jellyfin-deployment
  namespace: jellyfin
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jellyfin
  template:
    metadata:
      labels:
        app: jellyfin
    spec:
      containers:
      - env:
        - name: JELLYFIN_PublishedServerUrl
          value: https://jellyfin.blunders.me
        image: ghcr.io/jellyfin/jellyfin:10.10.3
        name: jellyfin
        ports:
        - containerPort: 8096
        resources:
          limits:
            cpu: 3000m
            gpu.intel.com/i915: "1"
            memory: 2700Mi
          requests:
            cpu: 100m
            memory: 300Mi
        securityContext:
          runAsGroup: 1003
          runAsUser: 1003
        volumeMounts:
        - mountPath: /media
          name: jellyfin-media-pvc
        - mountPath: /config
          name: jellyfin-config-pvc
          subPath: config
        - mountPath: /cache
          name: jellyfin-config-pvc
          subPath: cache
      volumes:
      - name: jellyfin-config-pvc
        persistentVolumeClaim:
          claimName: jellyfin-config-pvc
      - name: jellyfin-media-pvc
        persistentVolumeClaim:
          claimName: jellyfin-media-pvc
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    cert-manager.io/cluster-issuer: prod-cert-issuer
  name: jellyfin
  namespace: jellyfin
spec:
  ingressClassName: nginx
  rules:
  - host: jellyfin.blunders.me
    http:
      paths:
      - backend:
          service:
            name: jellyfin-service
            port:
              number: 80
        path: /
        pathType: Prefix
  tls:
  - hosts:
    - jellyfin.blunders.me
    secretName: jellyfin-secret-tls
