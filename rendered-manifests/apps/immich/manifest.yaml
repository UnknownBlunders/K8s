apiVersion: v1
kind: Namespace
metadata:
  labels:
    name: immich
  name: immich
---
apiVersion: v1
automountServiceAccountToken: false
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/instance: immich
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.5
    helm.sh/chart: redis-19.5.3
  name: immich-redis-master
  namespace: immich
---
apiVersion: v1
data:
  master.conf: |-
    dir /data
    # User-supplied master configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of master configuration
  redis.conf: |-
    # User-supplied common configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
    # End of common configuration
  replica.conf: |-
    dir /data
    # User-supplied replica configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of replica configuration
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/instance: immich
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.5
    helm.sh/chart: redis-19.5.3
  name: immich-redis-configuration
  namespace: immich
---
apiVersion: v1
data:
  ping_liveness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ] && [ "$responseFirstWord" != "MASTERDOWN" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_readiness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/instance: immich
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.5
    helm.sh/chart: redis-19.5.3
  name: immich-redis-health
  namespace: immich
---
apiVersion: v1
data:
  start-master.sh: |
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    if [[ -f /opt/bitnami/redis/mounted-etc/master.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
    fi
    if [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--protected-mode" "no")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
    exec redis-server "${ARGS[@]}"
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/instance: immich
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.5
    helm.sh/chart: redis-19.5.3
  name: immich-redis-scripts
  namespace: immich
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: immich
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: machine-learning
    app.kubernetes.io/service: immich-machine-learning
    app.kubernetes.io/version: v1.119.0
    helm.sh/chart: immich-0.8.5
  name: immich-machine-learning
  namespace: immich
spec:
  ports:
  - name: http
    port: 3003
    protocol: TCP
    targetPort: http
  selector:
    app.kubernetes.io/instance: immich
    app.kubernetes.io/name: machine-learning
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: immich-pg-service
  namespace: immich
spec:
  ports:
  - port: 5432
    protocol: TCP
    targetPort: 5432
  selector:
    app: immich-pg
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: immich
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.5
    helm.sh/chart: redis-19.5.3
  name: immich-redis-headless
  namespace: immich
spec:
  clusterIP: None
  ports:
  - name: tcp-redis
    port: 6379
    targetPort: redis
  selector:
    app.kubernetes.io/instance: immich
    app.kubernetes.io/name: redis
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: master
    app.kubernetes.io/instance: immich
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.5
    helm.sh/chart: redis-19.5.3
  name: immich-redis-master
  namespace: immich
spec:
  internalTrafficPolicy: Cluster
  ports:
  - name: tcp-redis
    nodePort: null
    port: 6379
    targetPort: redis
  selector:
    app.kubernetes.io/component: master
    app.kubernetes.io/instance: immich
    app.kubernetes.io/name: redis
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: immich
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: server
    app.kubernetes.io/service: immich-server
    app.kubernetes.io/version: v1.119.0
    helm.sh/chart: immich-0.8.5
  name: immich-server
  namespace: immich
spec:
  ports:
  - name: http
    port: 2283
    protocol: TCP
    targetPort: http
  selector:
    app.kubernetes.io/instance: immich
    app.kubernetes.io/name: server
  type: ClusterIP
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: immich-ml-pv
spec:
  accessModes:
  - ReadWriteOnce
  capacity:
    storage: 10Gi
  mountOptions:
  - nfsvers=4.2
  nfs:
    path: /immich-ml
    server: nfs.blunders.me
  storageClassName: nfs
  volumeMode: Filesystem
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: immich-pg-pv
spec:
  accessModes:
  - ReadWriteOnce
  capacity:
    storage: 50Gi
  mountOptions:
  - nfsvers=4.2
  nfs:
    path: /immich-pg
    server: nfs.blunders.me
  storageClassName: nfs
  volumeMode: Filesystem
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: immich-photos-pv
spec:
  accessModes:
  - ReadWriteOnce
  capacity:
    storage: 500Gi
  mountOptions:
  - nfsvers=4.2
  nfs:
    path: /immich-photos
    server: nfs.blunders.me
  storageClassName: nfs
  volumeMode: Filesystem
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: immich-redis-pv
spec:
  accessModes:
  - ReadWriteOnce
  capacity:
    storage: 50Gi
  mountOptions:
  - hard
  - nfsvers=4.2
  nfs:
    path: /immich-redis
    server: nfs.blunders.me
  storageClassName: nfs
  volumeMode: Filesystem
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: immich-ml-pvc
  namespace: immich
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: nfs
  volumeName: immich-ml-pv
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: immich-pg-pvc
  namespace: immich
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
  storageClassName: nfs
  volumeName: immich-pg-pv
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: immich-photos-pvc
  namespace: immich
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 500Gi
  storageClassName: nfs
  volumeName: immich-photos-pv
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: immich-redis-pvc
  namespace: immich
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
  storageClassName: nfs
  volumeName: immich-redis-pv
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: immich
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: machine-learning
    app.kubernetes.io/version: v1.119.0
    helm.sh/chart: immich-0.8.5
  name: immich-machine-learning
  namespace: immich
spec:
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app.kubernetes.io/instance: immich
      app.kubernetes.io/name: machine-learning
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: immich
        app.kubernetes.io/name: machine-learning
    spec:
      automountServiceAccountToken: true
      containers:
      - env:
        - name: DB_DATABASE_NAME
          valueFrom:
            secretKeyRef:
              key: POSTGRES_DB
              name: immich-pg-secret
        - name: DB_HOSTNAME
          value: immich-pg-service
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: POSTGRES_PASSWORD
              name: immich-pg-secret
        - name: DB_USERNAME
          valueFrom:
            secretKeyRef:
              key: POSTGRES_USER
              name: immich-pg-secret
        - name: IMMICH_MACHINE_LEARNING_URL
          value: http://immich-machine-learning:3003
        - name: LOG_LEVEL
          value: verbose
        - name: REDIS_HOSTNAME
          value: immich-redis-master
        - name: TRANSFORMERS_CACHE
          value: /cache
        - name: TZ
          value: America/Denver
        image: ghcr.io/immich-app/immich-machine-learning:v1.123.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /ping
            port: http
          initialDelaySeconds: 120
          periodSeconds: 10
          timeoutSeconds: 1
        name: immich-machine-learning
        ports:
        - containerPort: 3003
          name: http
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /ping
            port: http
          initialDelaySeconds: 120
          periodSeconds: 10
          timeoutSeconds: 1
        resources:
          requests:
            cpu: 500m
            memory: 4096M
        securityContext:
          runAsGroup: 1007
          runAsUser: 1007
        startupProbe:
          failureThreshold: 60
          httpGet:
            path: /ping
            port: http
          initialDelaySeconds: 0
          periodSeconds: 10
          timeoutSeconds: 1
        volumeMounts:
        - mountPath: /cache
          name: cache
      dnsPolicy: ClusterFirst
      enableServiceLinks: true
      serviceAccountName: default
      volumes:
      - name: cache
        persistentVolumeClaim:
          claimName: immich-ml-pvc
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: immich-pg
  name: immich-pg-deployment
  namespace: immich
spec:
  replicas: 1
  selector:
    matchLabels:
      app: immich-pg
  template:
    metadata:
      labels:
        app: immich-pg
    spec:
      containers:
      - env:
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              key: POSTGRES_DB
              name: immich-pg-secret
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              key: POSTGRES_USER
              name: immich-pg-secret
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              key: POSTGRES_PASSWORD
              name: immich-pg-secret
        image: tensorchord/pgvecto-rs:pg14-v0.2.0
        name: immich-pg
        ports:
        - containerPort: 5432
        resources:
          limits:
            memory: 3000Mi
          requests:
            memory: 3000Mi
        securityContext:
          runAsGroup: 1008
          runAsUser: 1008
        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          name: immich-pg-pvc
      volumes:
      - name: immich-pg-pvc
        persistentVolumeClaim:
          claimName: immich-pg-pvc
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: immich
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: server
    app.kubernetes.io/version: v1.119.0
    helm.sh/chart: immich-0.8.5
  name: immich-server
  namespace: immich
spec:
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app.kubernetes.io/instance: immich
      app.kubernetes.io/name: server
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: immich
        app.kubernetes.io/name: server
    spec:
      automountServiceAccountToken: true
      containers:
      - env:
        - name: DB_DATABASE_NAME
          valueFrom:
            secretKeyRef:
              key: POSTGRES_DB
              name: immich-pg-secret
        - name: DB_HOSTNAME
          value: immich-pg-service
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: POSTGRES_PASSWORD
              name: immich-pg-secret
        - name: DB_USERNAME
          valueFrom:
            secretKeyRef:
              key: POSTGRES_USER
              name: immich-pg-secret
        - name: IMMICH_MACHINE_LEARNING_URL
          value: http://immich-machine-learning:3003
        - name: LOG_LEVEL
          value: verbose
        - name: REDIS_HOSTNAME
          value: immich-redis-master
        - name: TZ
          value: America/Denver
        image: ghcr.io/immich-app/immich-server:v1.123.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /api/server/ping
            port: http
          initialDelaySeconds: 0
          periodSeconds: 10
          timeoutSeconds: 1
        name: immich-server
        ports:
        - containerPort: 2283
          name: http
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /api/server/ping
            port: http
          initialDelaySeconds: 0
          periodSeconds: 10
          timeoutSeconds: 1
        resources:
          requests:
            cpu: 1500m
            memory: 2048M
        securityContext:
          runAsGroup: 1007
          runAsUser: 1007
        startupProbe:
          failureThreshold: 30
          httpGet:
            path: /api/server/ping
            port: http
          initialDelaySeconds: 0
          periodSeconds: 10
          timeoutSeconds: 1
        volumeMounts:
        - mountPath: /usr/src/app/upload
          name: library
      dnsPolicy: ClusterFirst
      enableServiceLinks: true
      serviceAccountName: default
      volumes:
      - name: library
        persistentVolumeClaim:
          claimName: immich-photos-pvc
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app.kubernetes.io/component: master
    app.kubernetes.io/instance: immich
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.5
    helm.sh/chart: redis-19.5.3
  name: immich-redis-master
  namespace: immich
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: master
      app.kubernetes.io/instance: immich
      app.kubernetes.io/name: redis
  serviceName: immich-redis-headless
  template:
    metadata:
      annotations:
        checksum/configmap: 86bcc953bb473748a3d3dc60b7c11f34e60c93519234d4c37f42e22ada559d47
        checksum/health: aff24913d801436ea469d8d374b2ddb3ec4c43ee7ab24663d5f8ff1a1b6991a9
        checksum/scripts: 43cdf68c28f3abe25ce017a82f74dbf2437d1900fd69df51a55a3edf6193d141
        checksum/secret: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
      labels:
        app.kubernetes.io/component: master
        app.kubernetes.io/instance: immich
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: redis
        app.kubernetes.io/version: 7.2.5
        helm.sh/chart: redis-19.5.3
    spec:
      affinity:
        nodeAffinity: null
        podAffinity: null
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/component: master
                  app.kubernetes.io/instance: immich
                  app.kubernetes.io/name: redis
              topologyKey: kubernetes.io/hostname
            weight: 1
      automountServiceAccountToken: false
      containers:
      - args:
        - -c
        - /opt/bitnami/scripts/start-scripts/start-master.sh
        command:
        - /bin/bash
        env:
        - name: BITNAMI_DEBUG
          value: "false"
        - name: REDIS_REPLICATION_MODE
          value: master
        - name: ALLOW_EMPTY_PASSWORD
          value: "yes"
        - name: REDIS_TLS_ENABLED
          value: "no"
        - name: REDIS_PORT
          value: "6379"
        image: docker.io/bitnami/redis:7.2.5-debian-12-r0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - /health/ping_liveness_local.sh 5
          failureThreshold: 5
          initialDelaySeconds: 20
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 6
        name: redis
        ports:
        - containerPort: 6379
          name: redis
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - /health/ping_readiness_local.sh 1
          failureThreshold: 5
          initialDelaySeconds: 20
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 2
        resources:
          limits:
            cpu: 150m
            ephemeral-storage: 1024Mi
            memory: 192Mi
          requests:
            cpu: 100m
            ephemeral-storage: 50Mi
            memory: 128Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 1009
          runAsNonRoot: true
          runAsUser: 1009
          seLinuxOptions: {}
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - mountPath: /opt/bitnami/scripts/start-scripts
          name: start-scripts
        - mountPath: /health
          name: health
        - mountPath: /data
          name: redis-data
        - mountPath: /opt/bitnami/redis/mounted-etc
          name: config
        - mountPath: /opt/bitnami/redis/etc/
          name: empty-dir
          subPath: app-conf-dir
        - mountPath: /tmp
          name: empty-dir
          subPath: tmp-dir
      enableServiceLinks: true
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      serviceAccountName: immich-redis-master
      terminationGracePeriodSeconds: 30
      volumes:
      - configMap:
          defaultMode: 493
          name: immich-redis-scripts
        name: start-scripts
      - configMap:
          defaultMode: 493
          name: immich-redis-health
        name: health
      - configMap:
          name: immich-redis-configuration
        name: config
      - emptyDir: {}
        name: empty-dir
      - name: redis-data
        persistentVolumeClaim:
          claimName: immich-redis-pvc
  updateStrategy:
    type: RollingUpdate
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  labels:
    app.kubernetes.io/component: master
    app.kubernetes.io/instance: immich
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.5
    helm.sh/chart: redis-19.5.3
  name: immich-redis-master
  namespace: immich
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: master
      app.kubernetes.io/instance: immich
      app.kubernetes.io/name: redis
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: immich-pg-external-secret
  namespace: immich
spec:
  data:
  - remoteRef:
      key: immich-pg-db
      property: database
    secretKey: db
  - remoteRef:
      key: immich-pg-db
      property: username
    secretKey: username
  - remoteRef:
      key: immich-pg-db
      property: password
    secretKey: password
  refreshInterval: 1h
  secretStoreRef:
    kind: ClusterSecretStore
    name: op-prod
  target:
    creationPolicy: Owner
    name: immich-pg-secret
    template:
      data:
        POSTGRES_DB: '{{ .db }}'
        POSTGRES_PASSWORD: '{{ .password }}'
        POSTGRES_USER: '{{ .username }}'
      engineVersion: v2
      type: Opaque
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    cert-manager.io/cluster-issuer: prod-cert-issuer
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
  labels:
    app.kubernetes.io/instance: immich
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: server
    app.kubernetes.io/version: v1.119.0
    helm.sh/chart: immich-0.8.5
  name: immich-server
  namespace: immich
spec:
  rules:
  - host: photos.blunders.me
    http:
      paths:
      - backend:
          service:
            name: immich-server
            port:
              number: 2283
        path: /
        pathType: Prefix
  tls:
  - hosts:
    - photos.blunders.me
    secretName: immich-web-tls
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  labels:
    app.kubernetes.io/instance: immich
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.5
    helm.sh/chart: redis-19.5.3
  name: immich-redis
  namespace: immich
spec:
  egress:
  - {}
  ingress:
  - ports:
    - port: 6379
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: immich
      app.kubernetes.io/name: redis
  policyTypes:
  - Ingress
  - Egress
apiVersion: v1
kind: Namespace
metadata:
  labels:
    name: immich
  name: immich
---
apiVersion: v1
automountServiceAccountToken: false
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/instance: immich
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.5
    helm.sh/chart: redis-19.5.3
  name: immich-redis-master
  namespace: immich
---
apiVersion: v1
data:
  master.conf: |-
    dir /data
    # User-supplied master configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of master configuration
  redis.conf: |-
    # User-supplied common configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
    # End of common configuration
  replica.conf: |-
    dir /data
    # User-supplied replica configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of replica configuration
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/instance: immich
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.5
    helm.sh/chart: redis-19.5.3
  name: immich-redis-configuration
  namespace: immich
---
apiVersion: v1
data:
  ping_liveness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ] && [ "$responseFirstWord" != "MASTERDOWN" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_readiness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/instance: immich
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.5
    helm.sh/chart: redis-19.5.3
  name: immich-redis-health
  namespace: immich
---
apiVersion: v1
data:
  start-master.sh: |
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    if [[ -f /opt/bitnami/redis/mounted-etc/master.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
    fi
    if [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--protected-mode" "no")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
    exec redis-server "${ARGS[@]}"
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/instance: immich
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.5
    helm.sh/chart: redis-19.5.3
  name: immich-redis-scripts
  namespace: immich
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: immich
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: machine-learning
    app.kubernetes.io/service: immich-machine-learning
    app.kubernetes.io/version: v1.119.0
    helm.sh/chart: immich-0.8.5
  name: immich-machine-learning
  namespace: immich
spec:
  ports:
  - name: http
    port: 3003
    protocol: TCP
    targetPort: http
  selector:
    app.kubernetes.io/instance: immich
    app.kubernetes.io/name: machine-learning
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: immich-pg-service
  namespace: immich
spec:
  ports:
  - port: 5432
    protocol: TCP
    targetPort: 5432
  selector:
    app: immich-pg
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: immich
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.5
    helm.sh/chart: redis-19.5.3
  name: immich-redis-headless
  namespace: immich
spec:
  clusterIP: None
  ports:
  - name: tcp-redis
    port: 6379
    targetPort: redis
  selector:
    app.kubernetes.io/instance: immich
    app.kubernetes.io/name: redis
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: master
    app.kubernetes.io/instance: immich
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.5
    helm.sh/chart: redis-19.5.3
  name: immich-redis-master
  namespace: immich
spec:
  internalTrafficPolicy: Cluster
  ports:
  - name: tcp-redis
    nodePort: null
    port: 6379
    targetPort: redis
  selector:
    app.kubernetes.io/component: master
    app.kubernetes.io/instance: immich
    app.kubernetes.io/name: redis
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: immich
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: server
    app.kubernetes.io/service: immich-server
    app.kubernetes.io/version: v1.119.0
    helm.sh/chart: immich-0.8.5
  name: immich-server
  namespace: immich
spec:
  ports:
  - name: http
    port: 2283
    protocol: TCP
    targetPort: http
  selector:
    app.kubernetes.io/instance: immich
    app.kubernetes.io/name: server
  type: ClusterIP
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: immich-ml-pv
spec:
  accessModes:
  - ReadWriteOnce
  capacity:
    storage: 10Gi
  mountOptions:
  - nfsvers=4.2
  nfs:
    path: /immich-ml
    server: nfs.blunders.me
  storageClassName: nfs
  volumeMode: Filesystem
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: immich-pg-pv
spec:
  accessModes:
  - ReadWriteOnce
  capacity:
    storage: 50Gi
  mountOptions:
  - nfsvers=4.2
  nfs:
    path: /immich-pg
    server: nfs.blunders.me
  storageClassName: nfs
  volumeMode: Filesystem
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: immich-photos-pv
spec:
  accessModes:
  - ReadWriteOnce
  capacity:
    storage: 500Gi
  mountOptions:
  - nfsvers=4.2
  nfs:
    path: /immich-photos
    server: nfs.blunders.me
  storageClassName: nfs
  volumeMode: Filesystem
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: immich-redis-pv
spec:
  accessModes:
  - ReadWriteOnce
  capacity:
    storage: 50Gi
  mountOptions:
  - hard
  - nfsvers=4.2
  nfs:
    path: /immich-redis
    server: nfs.blunders.me
  storageClassName: nfs
  volumeMode: Filesystem
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: immich-ml-pvc
  namespace: immich
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: nfs
  volumeName: immich-ml-pv
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: immich-pg-pvc
  namespace: immich
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
  storageClassName: nfs
  volumeName: immich-pg-pv
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: immich-photos-pvc
  namespace: immich
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 500Gi
  storageClassName: nfs
  volumeName: immich-photos-pv
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: immich-redis-pvc
  namespace: immich
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
  storageClassName: nfs
  volumeName: immich-redis-pv
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: immich
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: machine-learning
    app.kubernetes.io/version: v1.119.0
    helm.sh/chart: immich-0.8.5
  name: immich-machine-learning
  namespace: immich
spec:
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app.kubernetes.io/instance: immich
      app.kubernetes.io/name: machine-learning
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: immich
        app.kubernetes.io/name: machine-learning
    spec:
      automountServiceAccountToken: true
      containers:
      - env:
        - name: DB_DATABASE_NAME
          valueFrom:
            secretKeyRef:
              key: POSTGRES_DB
              name: immich-pg-secret
        - name: DB_HOSTNAME
          value: immich-pg-service
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: POSTGRES_PASSWORD
              name: immich-pg-secret
        - name: DB_USERNAME
          valueFrom:
            secretKeyRef:
              key: POSTGRES_USER
              name: immich-pg-secret
        - name: IMMICH_MACHINE_LEARNING_URL
          value: http://immich-machine-learning:3003
        - name: LOG_LEVEL
          value: verbose
        - name: REDIS_HOSTNAME
          value: immich-redis-master
        - name: TRANSFORMERS_CACHE
          value: /cache
        - name: TZ
          value: America/Denver
        image: ghcr.io/immich-app/immich-machine-learning:v1.123.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /ping
            port: http
          initialDelaySeconds: 120
          periodSeconds: 10
          timeoutSeconds: 1
        name: immich-machine-learning
        ports:
        - containerPort: 3003
          name: http
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /ping
            port: http
          initialDelaySeconds: 120
          periodSeconds: 10
          timeoutSeconds: 1
        resources:
          requests:
            cpu: 500m
            memory: 4096M
        securityContext:
          runAsGroup: 1007
          runAsUser: 1007
        startupProbe:
          failureThreshold: 60
          httpGet:
            path: /ping
            port: http
          initialDelaySeconds: 0
          periodSeconds: 10
          timeoutSeconds: 1
        volumeMounts:
        - mountPath: /cache
          name: cache
      dnsPolicy: ClusterFirst
      enableServiceLinks: true
      serviceAccountName: default
      volumes:
      - name: cache
        persistentVolumeClaim:
          claimName: immich-ml-pvc
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: immich-pg
  name: immich-pg-deployment
  namespace: immich
spec:
  replicas: 1
  selector:
    matchLabels:
      app: immich-pg
  template:
    metadata:
      labels:
        app: immich-pg
    spec:
      containers:
      - env:
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              key: POSTGRES_DB
              name: immich-pg-secret
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              key: POSTGRES_USER
              name: immich-pg-secret
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              key: POSTGRES_PASSWORD
              name: immich-pg-secret
        image: tensorchord/pgvecto-rs:pg14-v0.2.0
        name: immich-pg
        ports:
        - containerPort: 5432
        resources:
          limits:
            memory: 3000Mi
          requests:
            memory: 3000Mi
        securityContext:
          runAsGroup: 1008
          runAsUser: 1008
        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          name: immich-pg-pvc
      volumes:
      - name: immich-pg-pvc
        persistentVolumeClaim:
          claimName: immich-pg-pvc
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: immich
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: server
    app.kubernetes.io/version: v1.119.0
    helm.sh/chart: immich-0.8.5
  name: immich-server
  namespace: immich
spec:
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app.kubernetes.io/instance: immich
      app.kubernetes.io/name: server
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: immich
        app.kubernetes.io/name: server
    spec:
      automountServiceAccountToken: true
      containers:
      - env:
        - name: DB_DATABASE_NAME
          valueFrom:
            secretKeyRef:
              key: POSTGRES_DB
              name: immich-pg-secret
        - name: DB_HOSTNAME
          value: immich-pg-service
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: POSTGRES_PASSWORD
              name: immich-pg-secret
        - name: DB_USERNAME
          valueFrom:
            secretKeyRef:
              key: POSTGRES_USER
              name: immich-pg-secret
        - name: IMMICH_MACHINE_LEARNING_URL
          value: http://immich-machine-learning:3003
        - name: LOG_LEVEL
          value: verbose
        - name: REDIS_HOSTNAME
          value: immich-redis-master
        - name: TZ
          value: America/Denver
        image: ghcr.io/immich-app/immich-server:v1.123.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /api/server/ping
            port: http
          initialDelaySeconds: 0
          periodSeconds: 10
          timeoutSeconds: 1
        name: immich-server
        ports:
        - containerPort: 2283
          name: http
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /api/server/ping
            port: http
          initialDelaySeconds: 0
          periodSeconds: 10
          timeoutSeconds: 1
        resources:
          requests:
            cpu: 1500m
            memory: 2048M
        securityContext:
          runAsGroup: 1007
          runAsUser: 1007
        startupProbe:
          failureThreshold: 30
          httpGet:
            path: /api/server/ping
            port: http
          initialDelaySeconds: 0
          periodSeconds: 10
          timeoutSeconds: 1
        volumeMounts:
        - mountPath: /usr/src/app/upload
          name: library
      dnsPolicy: ClusterFirst
      enableServiceLinks: true
      serviceAccountName: default
      volumes:
      - name: library
        persistentVolumeClaim:
          claimName: immich-photos-pvc
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app.kubernetes.io/component: master
    app.kubernetes.io/instance: immich
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.5
    helm.sh/chart: redis-19.5.3
  name: immich-redis-master
  namespace: immich
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: master
      app.kubernetes.io/instance: immich
      app.kubernetes.io/name: redis
  serviceName: immich-redis-headless
  template:
    metadata:
      annotations:
        checksum/configmap: 86bcc953bb473748a3d3dc60b7c11f34e60c93519234d4c37f42e22ada559d47
        checksum/health: aff24913d801436ea469d8d374b2ddb3ec4c43ee7ab24663d5f8ff1a1b6991a9
        checksum/scripts: 43cdf68c28f3abe25ce017a82f74dbf2437d1900fd69df51a55a3edf6193d141
        checksum/secret: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
      labels:
        app.kubernetes.io/component: master
        app.kubernetes.io/instance: immich
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: redis
        app.kubernetes.io/version: 7.2.5
        helm.sh/chart: redis-19.5.3
    spec:
      affinity:
        nodeAffinity: null
        podAffinity: null
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/component: master
                  app.kubernetes.io/instance: immich
                  app.kubernetes.io/name: redis
              topologyKey: kubernetes.io/hostname
            weight: 1
      automountServiceAccountToken: false
      containers:
      - args:
        - -c
        - /opt/bitnami/scripts/start-scripts/start-master.sh
        command:
        - /bin/bash
        env:
        - name: BITNAMI_DEBUG
          value: "false"
        - name: REDIS_REPLICATION_MODE
          value: master
        - name: ALLOW_EMPTY_PASSWORD
          value: "yes"
        - name: REDIS_TLS_ENABLED
          value: "no"
        - name: REDIS_PORT
          value: "6379"
        image: docker.io/bitnami/redis:7.2.5-debian-12-r0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - /health/ping_liveness_local.sh 5
          failureThreshold: 5
          initialDelaySeconds: 20
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 6
        name: redis
        ports:
        - containerPort: 6379
          name: redis
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - /health/ping_readiness_local.sh 1
          failureThreshold: 5
          initialDelaySeconds: 20
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 2
        resources:
          limits:
            cpu: 150m
            ephemeral-storage: 1024Mi
            memory: 192Mi
          requests:
            cpu: 100m
            ephemeral-storage: 50Mi
            memory: 128Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 1009
          runAsNonRoot: true
          runAsUser: 1009
          seLinuxOptions: {}
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - mountPath: /opt/bitnami/scripts/start-scripts
          name: start-scripts
        - mountPath: /health
          name: health
        - mountPath: /data
          name: redis-data
        - mountPath: /opt/bitnami/redis/mounted-etc
          name: config
        - mountPath: /opt/bitnami/redis/etc/
          name: empty-dir
          subPath: app-conf-dir
        - mountPath: /tmp
          name: empty-dir
          subPath: tmp-dir
      enableServiceLinks: true
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      serviceAccountName: immich-redis-master
      terminationGracePeriodSeconds: 30
      volumes:
      - configMap:
          defaultMode: 493
          name: immich-redis-scripts
        name: start-scripts
      - configMap:
          defaultMode: 493
          name: immich-redis-health
        name: health
      - configMap:
          name: immich-redis-configuration
        name: config
      - emptyDir: {}
        name: empty-dir
      - name: redis-data
        persistentVolumeClaim:
          claimName: immich-redis-pvc
  updateStrategy:
    type: RollingUpdate
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  labels:
    app.kubernetes.io/component: master
    app.kubernetes.io/instance: immich
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.5
    helm.sh/chart: redis-19.5.3
  name: immich-redis-master
  namespace: immich
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: master
      app.kubernetes.io/instance: immich
      app.kubernetes.io/name: redis
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: immich-pg-external-secret
  namespace: immich
spec:
  data:
  - remoteRef:
      key: immich-pg-db
      property: database
    secretKey: db
  - remoteRef:
      key: immich-pg-db
      property: username
    secretKey: username
  - remoteRef:
      key: immich-pg-db
      property: password
    secretKey: password
  refreshInterval: 1h
  secretStoreRef:
    kind: ClusterSecretStore
    name: op-prod
  target:
    creationPolicy: Owner
    name: immich-pg-secret
    template:
      data:
        POSTGRES_DB: '{{ .db }}'
        POSTGRES_PASSWORD: '{{ .password }}'
        POSTGRES_USER: '{{ .username }}'
      engineVersion: v2
      type: Opaque
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    cert-manager.io/cluster-issuer: prod-cert-issuer
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
  labels:
    app.kubernetes.io/instance: immich
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: server
    app.kubernetes.io/version: v1.119.0
    helm.sh/chart: immich-0.8.5
  name: immich-server
  namespace: immich
spec:
  rules:
  - host: photos.blunders.me
    http:
      paths:
      - backend:
          service:
            name: immich-server
            port:
              number: 2283
        path: /
        pathType: Prefix
  tls:
  - hosts:
    - photos.blunders.me
    secretName: immich-web-tls
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  labels:
    app.kubernetes.io/instance: immich
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.5
    helm.sh/chart: redis-19.5.3
  name: immich-redis
  namespace: immich
spec:
  egress:
  - {}
  ingress:
  - ports:
    - port: 6379
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: immich
      app.kubernetes.io/name: redis
  policyTypes:
  - Ingress
  - Egress
